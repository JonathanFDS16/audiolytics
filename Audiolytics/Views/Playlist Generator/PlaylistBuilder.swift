//
//  PlaylistBuilder.swift
//  Audiolytics
//
//  Created by Deborah Park on 4/23/25.
//
import Foundation

struct PlaylistResponse: Codable {
    let items: [SpotifyPlaylist]
}

struct SpotifyPlaylist: Identifiable, Codable {
    let id: String
    let name: String
    let images: [SpotifyImage]

    var imageURL: URL? {
        images.first?.url
    }
}

struct SpotifyImage: Codable {
    let url: URL
}


class PlaylistBuilder {

    static func fetchUserID(token: String) async -> String? {
        var request = URLRequest(url: URL(string: "https://api.spotify.com/v1/me")!)
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        do {
            let (data, _) = try await URLSession.shared.data(for: request)
            let json = try JSONSerialization.jsonObject(with: data) as? [String: Any]
            return json?["id"] as? String
        } catch {
            print("Error fetching user ID: \(error.localizedDescription)")
            return nil
        }
    }

    static func createPlaylist(
        token: String,
        userID: String,
        name: String,
        description: String = "Generated by Audiolytics",
        isPublic: Bool = false
    ) async -> String? {
        guard let url = URL(string: "https://api.spotify.com/v1/users/\(userID)/playlists") else { return nil }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let payload: [String: Any] = [
            "name": name,
            "description": description,
            "public": isPublic
        ]

        request.httpBody = try? JSONSerialization.data(withJSONObject: payload)

        do {
            let (data, _) = try await URLSession.shared.data(for: request)
            let json = try JSONSerialization.jsonObject(with: data) as? [String: Any]
            if let playlistID = json?["id"] as? String {
                saveCreatedPlaylistID(playlistID)
                return playlistID
            }
        } catch {
            print("Error creating playlist: \(error.localizedDescription)")
        }

        return nil
    }

    static func addTracks(
        token: String,
        playlistID: String,
        uris: [String]
    ) async -> Bool {
        guard !uris.isEmpty else {
            print("No URIs to add.")
            return false
        }

        guard let url = URL(string: "https://api.spotify.com/v1/playlists/\(playlistID)/tracks") else { return false }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let body = ["uris": uris]
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)

        do {
            _ = try await URLSession.shared.data(for: request)
            return true
        } catch {
            print("Error adding tracks: \(error.localizedDescription)")
            return false
        }
    }

    static func saveCreatedPlaylistID(_ id: String) {
        var stored = UserDefaults.standard.stringArray(forKey: "audiolyticsPlaylists") ?? []
        if !stored.contains(id) {
            stored.append(id)
            UserDefaults.standard.set(stored, forKey: "audiolyticsPlaylists")
        }
    }

    static func getSavedPlaylistIDs() -> [String] {
        UserDefaults.standard.stringArray(forKey: "audiolyticsPlaylists") ?? []
    }
}
